{"version":3,"sources":["components/Timer.js","App.js","data/logic.js","reportWebVitals.js","index.js"],"names":["Timer","timeData","calculatedTime","seconds","minutes","Math","floor","hours","timeToShow","key","App","useState","time","setTime","status","setStatus","waitClick$","Subject","pipe","buffer","debounceTime","map","item","length","filter","subscribe","useEffect","timer$","Observable","observer","intervalId","setInterval","next","clearInterval","error","console","log","complete","subscription","unsubscribe","handleStart","handleReset","handleStop","handleWait","useLogic","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAEe,SAASA,EAAT,GAEZ,IADCC,EACF,EADEA,SAEMC,EAAiB,CACnBC,QAAUF,EAAS,GACnBG,QAASC,KAAKC,MAAML,EAAS,IAC7BM,MAAOF,KAAKC,MAAML,EAAS,OAEzBO,EAAa,GACnB,IAAI,IAAIC,KAAOP,EAEPM,EAAWC,GADZP,EAAeO,GAAK,EACD,KAEdP,EAAeO,GAAK,GACxB,WAAsBP,EAAeO,IAGrC,UAAqBP,EAAeO,IAI9C,OACE,gCACKD,EAAWD,MADhB,IACwBC,EAAWJ,QADnC,IAC6CI,EAAWL,W,4DCC7CO,MApBf,WACE,MCHsB,WACpB,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,QAArC,mBAAOG,EAAP,KAAeC,EAAf,KAkBMC,EAAa,IAAIC,IA0CvB,OAxCAD,EAAWE,KACPC,YAAOH,EAAWE,KAAKE,YAAa,OACpCC,aAAI,SAAAC,GAAI,OAAIA,EAAKC,UACjBC,aAAO,SAAAF,GAAI,OAAa,IAATA,MACjBG,WAAU,WACRV,EAAU,WAGdW,qBAAU,WACN,GAAe,UAAXZ,EAAoB,CACpB,IAAMa,EAAS,IAAIC,KAAW,SAACC,GAC3B,IAAMC,EAAaC,aAAY,WAC3BF,EAASG,SACV,KAEH,OAAO,WACHC,cAAcH,OAGhBD,EAAW,CACbG,KAAM,WACFnB,GAAQ,SAACD,GAAD,OAAUA,EAAO,MAE7BsB,MAAO,WACHC,QAAQC,IAAI,UAEhBC,SAAU,WACNF,QAAQC,IAAI,uBAGdE,EAAeX,EAAOF,UAAUI,GACtC,OAAQ,WACJS,EAAaC,eAGN,UAAXzB,GACAC,EAAU,WAEf,CAACD,IAEG,CACHF,OACAE,SACA0B,YA7DgB,WAChBzB,EAAU,UA6DV0B,YA3DgB,WACD,UAAX3B,GACAC,EAAU,SACdF,EAAQ,IAyDR6B,WAvDe,WACf3B,EAAU,QACVF,EAAQ,IAsDR8B,WApDe,WACf3B,EAAWgB,SDPbY,GANFhC,EADF,EACEA,KACAE,EAFF,EAEEA,OACA0B,EAHF,EAGEA,YACAE,EAJF,EAIEA,WACAD,EALF,EAKEA,YACAE,EANF,EAMEA,WAGF,OACE,qCACE,cAAC3C,EAAD,CAAOC,SAAUW,IACjB,wBAAQiC,QAAoB,UAAX/B,EAAqB4B,EAAaF,EAAnD,wBACA,wBAAQK,QAASJ,EAAjB,mBACA,wBAAQI,QAASF,EAAjB,sBETSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d98d7019.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Timer({\r\n    timeData\r\n}){\r\n    const calculatedTime = {\r\n        seconds: (timeData%60),\r\n        minutes: Math.floor(timeData/60),\r\n        hours: Math.floor(timeData/3600),\r\n    }\r\n    const timeToShow = {}\r\n    for(let key in calculatedTime){\r\n        if(calculatedTime[key]<1){\r\n            timeToShow[key] = '00';\r\n        }\r\n        else if(calculatedTime[key]<10){\r\n            timeToShow[key] = `0${calculatedTime[key]}`\r\n        }\r\n        else{\r\n            timeToShow[key] = `${calculatedTime[key]}`;\r\n        }\r\n    }\r\n\r\n  return(\r\n    <div>\r\n        {timeToShow.hours}:{timeToShow.minutes}:{timeToShow.seconds}\r\n    </div>)\r\n  ;\r\n}\r\n","import './App.css';\nimport Timer from './components/Timer'\nimport {useLogic} from './data/logic'\n\n\n\nfunction App() {\n  const {\n    time,\n    status,\n    handleStart,\n    handleStop,\n    handleReset,\n    handleWait,\n  } = useLogic();\n\n  return (\n    <>\n      <Timer timeData={time}/>\n      <button onClick={status === 'start' ? handleStop : handleStart} >Start/Stop</button>\n      <button onClick={handleReset}>Reset</button>\n      <button onClick={handleWait}>Wait</button>\n    </>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react'\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { buffer, map, filter, debounceTime } from 'rxjs/operators'\r\n\r\nexport const useLogic = () => {\r\n    const [time, setTime] = useState(0);\r\n    const [status, setStatus] = useState('stop');\r\n\r\n    const handleStart = () => {\r\n        setStatus('start');\r\n    }\r\n    const handleReset = () => {\r\n        if (status === 'start')\r\n            setStatus('reset');\r\n        setTime(0);\r\n    }\r\n    const handleStop = () => {\r\n        setStatus('stop');\r\n        setTime(0);\r\n    }\r\n    const handleWait = () => {\r\n        waitClick$.next();\r\n    }\r\n\r\n    const waitClick$ = new Subject()\r\n\r\n    waitClick$.pipe(\r\n        buffer(waitClick$.pipe(debounceTime(300))),\r\n        map(item => item.length),\r\n        filter(item => item === 2),\r\n    ).subscribe(() => {\r\n        setStatus('wait');\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (status === 'start') {\r\n            const timer$ = new Observable((observer) => {\r\n                const intervalId = setInterval(() => {\r\n                    observer.next();\r\n                }, 1000);\r\n\r\n                return () => {\r\n                    clearInterval(intervalId);\r\n                };\r\n            });\r\n            const observer = {\r\n                next: () => {\r\n                    setTime((time) => time + 1)\r\n                },\r\n                error: () => {\r\n                    console.log('error')\r\n                },\r\n                complete: () => {\r\n                    console.log('observer complete')\r\n                }\r\n            };\r\n            const subscription = timer$.subscribe(observer);\r\n            return (() => {\r\n                subscription.unsubscribe();\r\n            })\r\n        }\r\n        if (status === 'reset') {\r\n            setStatus('start');\r\n        }\r\n    }, [status])\r\n\r\n    return {\r\n        time,\r\n        status,\r\n        handleStart,\r\n        handleReset,\r\n        handleStop,\r\n        handleWait,\r\n    }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}